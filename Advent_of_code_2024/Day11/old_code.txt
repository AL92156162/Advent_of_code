int lookup_table_size = 10;
std::array<std::vector<int>, 10> lookup_table;
displayLookupTable(lookup_table);
unsigned int stone_number = 0;

for (int k = 0; k < 10; ++k) {
    std::vector<unsigned long long> vec;
    vec.push_back(k);
    for (int i = 0; i < lookup_table_size; ++i) {
        std::vector<unsigned long long> new_vec;
        for (int j = 0; j < vec.size(); ++j) {
            int stone_number = 1;
            if (vec[j] == 0) {
                new_vec.push_back(1);
            }
            else {
                int ndigit = numDigits(vec[j]);
                if (!(ndigit % 2)) {
                    std::vector<unsigned long long> new_stones = split(vec[j]);
                    int decim = pow(10, ndigit / 2);
                    new_vec.push_back(vec[j] / decim);
                    new_vec.push_back(vec[j] % decim);
                    stone_number = 2;
                }
                else {
                    new_vec.push_back(2024 * vec[j]);
                }
            }
        }
        lookup_table[k].push_back(new_vec.size());
        vec = new_vec;
    }
}

displayLookupTable(lookup_table);
unsigned long long total_stone = 0;
int n_iter = 25;
for (int k = 0; k < 10; ++k) {
    std::vector<unsigned long long> vec;
    vec.push_back(k);
    for (int i = 0; i < n_iter; ++i) {
        std::vector<unsigned long long> new_vec;
        for (int j = 0; j < vec.size(); ++j) {
            int stone_number = 1;

            if (i >= n_iter - lookup_table_size && vec[j]<10) {
                total_stone += lookup_table[vec[j]][n_iter - lookup_table_size];
            }

            else {
                if (vec[j] == 0) {
                    new_vec.push_back(1);
                }
                else {
                    int ndigit = numDigits(vec[j]);
                    if (!(ndigit % 2)) {
                        std::vector<unsigned long long> new_stones = split(vec[j]);
                        int decim = pow(10, ndigit / 2);
                        new_vec.push_back(vec[j] / decim);
                        new_vec.push_back(vec[j] % decim);
                        stone_number = 2;
                    }
                    else {
                        new_vec.push_back(2024 * vec[j]);
                    }
                }
            }
        }
        vec = new_vec;
    }
}

std::cout << total_stone << std::endl;